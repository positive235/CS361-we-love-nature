{"version":3,"sources":["components/HowToUseModal.js","img/waterfall.jpeg","App.js","img/sea.jpeg","img/trees.jpeg","img/flower.jpeg","img/flowers.jpeg","img/palm-trees.jpeg","img/purple-flowers.jpeg","img/red-sky.jpeg","reportWebVitals.js","index.js"],"names":["HowToUseModal","useState","open","setOpen","Modal","closeIcon","trigger","className","Icon","name","onClose","onOpen","Header","icon","content","Content","List","Item","DEFAULT_IMAGES","url","liked","waterfall","localStorage","getItem","db","JSON","parse","alreadyRemoved","charactersState","App","characters","setCharacters","lastDirection","setLastDirection","styleChange","setStyleChange","loading","setLoading","natureImageScraper","a","fetch","response","ok","Error","statusText","text","setItem","stringify","childRefs","useMemo","Array","length","fill","map","i","React","createRef","buttonDescription","description","swipe","dir","cardsLeft","filter","person","includes","toBeRemoved","index","indexOf","push","undefined","alert","window","location","reload","current","result","forEach","item","rel","href","crossorigin","Loader","active","size","inline","character","ref","onSwipe","direction","nameToDelete","swiped","onCardLeftScreen","style","backgroundImage","Popup","header","onClick","position","basic","Actions","Button","color","inverted","refresh","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6868c08c.chunk.js","sourcesContent":["// Author: Hae-Ji Park (github.com/positive235)\n// Date: Jul 2021 \n// Summary: How to use modal component\n\nimport React, { useState } from 'react'\nimport { Header, Icon, Modal, List } from 'semantic-ui-react'\nimport { FcLike } from 'react-icons/fc'\nimport { AiFillDislike } from 'react-icons/ai'\nimport { GrRefresh } from 'react-icons/gr'\n\nfunction HowToUseModal() {\n\n    const [open, setOpen] = useState(false)\n\n    return (\n        <Modal\n        closeIcon\n        open={open}\n        trigger={<button className='how-to-use'><Icon name='book' /> How To Use</button>}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        >\n        <Header icon='book' content='How To Use' />\n      <Modal.Content>\n      \n      <List>\n        <List.Item>\n          <List.Header>Swipe Left</List.Header>If you LIKE the image, swipe it to the left.\n        </List.Item>\n        <List.Item>\n          <List.Header>Swipe Right</List.Header>If you DISLIKE the image, swipe it to the right.\n        </List.Item>\n        <List.Item>\n          <List.Header><FcLike /> LIKE button</List.Header>If you LIKE the image, press this button!\n        </List.Item>\n        <List.Item>\n          <List.Header><AiFillDislike /> DISLIKE button</List.Header>If you DISLIKE the image, press this button!\n        </List.Item>\n        <List.Item>\n          <List.Header>STYLE Button</List.Header>\n          Change the style of the image by pressing this button! \n          If you click again, you can see the original one!\n        </List.Item>\n        <List.Item>\n          <List.Header><GrRefresh /> REFRESH button</List.Header>New set of nature images\n        </List.Item>\n      </List>\n        \n      </Modal.Content>\n      <Header icon='book' content='How To Use (in detail)' />\n      <Modal.Content>\n        <List>\n          <List.Item>\n            <List.Header>Swipe images</List.Header>If you like an image, swipe the image to the LEFT.\n            If you do NOT like an image, swipe the image to the RIGHT\n          </List.Item>\n          <List.Item>\n            <List.Header><FcLike /> LIKE button</List.Header>\n            If you like an image, press this 'Like' button. Then the image will be swiped to the left.\n          </List.Item>\n          <List.Item>\n            <List.Header><AiFillDislike /> DISLIKE button</List.Header>\n            If you do NOT like an image, press this 'Dislike' button. \n            Then the image will be swiped to the right.\n          </List.Item>\n          <List.Item>\n            <List.Header>STYLE Button</List.Header>\n            Change the style of the image by pressing this button! \n            If you click again, you can see the original one!\n          </List.Item>\n          <List.Item>\n            <List.Header><GrRefresh /> REFRESH button</List.Header>\n            New set of nature images will be shown! \n            But you need to wait for seconds to see the new images.\n          </List.Item>\n        </List>\n      </Modal.Content>\n      </Modal>\n\n    )\n}\n\nexport default HowToUseModal","export default __webpack_public_path__ + \"static/media/waterfall.eb492282.jpeg\";","// Author: Hae-Ji Park (github.com/positive235)\n// Date: Jul 2021\n// Summary: 'We Love Nature' - Reacting(Like or Dislike) to nature images \n// by swiping left or right, or pressing a button, Seeing new set of nature images, \n// Styling nature images\n\n//Credits:\n// Copyright file:\"https://github.com/3DJakob/react-tinder-card-demo/blob/master/src/examples/Advanced.js\" \n// Copyright (c) 2020 All Rights Reserved\n// Author: Jakob Unnebäck\n// Summary: react-tinder-card Advanced Example\n\nimport './App.css'\nimport React, { useState, useMemo } from 'react'\nimport TinderCard from 'react-tinder-card'\n\nimport { Popup, Header, Icon, Modal, Button, Loader } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport HowToUseModal from './components/HowToUseModal'\n\nimport { FcLike } from 'react-icons/fc'\nimport { AiFillDislike } from 'react-icons/ai'\nimport { GrRefresh } from 'react-icons/gr'\n\n// Default images\nimport waterfall from './img/waterfall.jpeg'\nimport sea from './img/sea.jpeg'\nimport trees from './img/trees.jpeg'\nimport flower from './img/flower.jpeg'\nimport flowers from './img/flowers.jpeg'\nimport palmTrees from './img/palm-trees.jpeg'\nimport purpleFlowers from './img/purple-flowers.jpeg'\nimport sunset from './img/red-sky.jpeg'\n\n\nconst DEFAULT_IMAGES = [\n  {\n    name: 'Sea',\n    url: sea,\n    liked: false\n  },\n  {\n    name: 'Trees',\n    url: trees,\n    liked: false\n  },\n  {\n    name: 'Flower',\n    url: flower,\n    liked: false\n  },\n  {\n    name: 'Flowers',\n    url: flowers,\n    liked: false\n  },\n  {\n    name: 'Palm Trees',\n    url: palmTrees,\n    liked: false\n  },\n  {\n    name: 'Purple Flowers',\n    url: purpleFlowers,\n    liked: false\n  },\n  {\n    name: 'Sunset',\n    url: sunset,\n    liked: false\n  },\n  {\n    name: 'Waterfall',\n    url: waterfall,\n    liked: false\n  }\n]\n\nif (localStorage.getItem(\"photos\")) {\n  var db = JSON.parse(localStorage.getItem(\"photos\"))\n} else {\n  // default nature images (not from nature image web scraping)\n  db = DEFAULT_IMAGES\n}\n\nvar alreadyRemoved = []\nlet charactersState = db\n\nfunction App () {\n  const [characters, setCharacters] = useState(db)\n  const [lastDirection, setLastDirection] = useState()\n  const [styleChange, setStyleChange] = useState(false)\n  const [open, setOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  \n  \n  async function natureImageScraper() {\n    const response = await fetch(\"https://nature-image-web-scraper.wl.r.appspot.com/a-set-of-nature-images\", {}) \n    if (!response.ok) {\n      throw Error(response.statusText)\n    }\n    return response.text()\n  }\n  \n  if (localStorage.getItem(\"photos\")) {\n    db = JSON.parse(localStorage.getItem(\"photos\"))\n  } else {\n    // default nature images (not from nature image web scraping)\n    db = DEFAULT_IMAGES\n    localStorage.setItem(\"photos\", JSON.stringify(db))\n  }\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\n\n  const buttonDescription = [\n    {\n      name: 'Back',\n      description: 'If you want to see the former nature image, press this button!',\n    },\n    {\n      name: 'Like',\n      description: 'If you like this image, press this button! Then the image will be swiped to the left',\n    },\n    {\n      name: 'Dislike',\n      description: \n      'If you do NOT like this image, press this button! Then the image will be swiped to the right',\n    },\n    {\n      name: 'Change Style',\n      description: \n      'Change the style of the image by pressing this button! If you click again, you can see the original one!',\n    },\n    {\n      name: 'Refresh',\n      description: \n      'New set of nature images will be shown! But you need to wait for seconds..!', \n    }\n  ]\n\n  const swiped = (direction, nameToDelete) => {\n    const index = db.map(person => person.name).indexOf(nameToDelete)\n    setLastDirection(direction)\n    if (direction === 'left') db[index].liked = true\n    if (direction === 'right') db[index].liked = false\n  }\n\n  const outOfFrame = (name) => {\n    charactersState = charactersState.filter(character => character.name !== name)\n    setCharacters(charactersState)\n  }\n\n  const swipe = (dir) => {\n    // setStyleChange(false)\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\n    if (cardsLeft.length) {\n      // Find the card object to be removed\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name\n      // Find the index of which to make the reference to \n      const index = db.map(person => person.name).indexOf(toBeRemoved)\n      // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      alreadyRemoved.push(toBeRemoved) \n      if (childRefs[index] === undefined) {\n        alert(\"Sorry! the window will be refreshed!\")\n        window.location.reload()\n      }\n      childRefs[index].current.swipe(dir) // Swipe the card\n    }\n  }\n\n  const imageStyleChange = () => {\n    if (styleChange === false) {\n      setStyleChange(true)\n    } else {\n      setStyleChange(false)\n    }\n  }\n\n  async function refresh() {\n    (async() => {\n      setLoading(true)\n      var result = await natureImageScraper()\n      db = [];\n      result = JSON.parse(result)\n      result.forEach(function(item) {\n        if (item !== null) {\n          db.push({\n            name: item,\n            url: item,\n            liked: false\n          })\n        }\n      })\n      localStorage.setItem(\"photos\", JSON.stringify(db))\n      setLoading(false)\n      window.location.reload()\n    })()\n\n    //close the modal\n    setOpen(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <HowToUseModal />\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n      <link href=\"https://fonts.googleapis.com/css2?family=Amatic+SC:wght@400;700&display=swap\" rel=\"stylesheet\" />\n      <h1>We <FcLike/> Nature</h1>\n      {loading ? (<Loader active size='massive' inline='centered'>Preparing New Images</Loader>)\n      :\n      <div className='cardContainer'>\n        {characters.map((character, index) =>\n          <TinderCard \n            ref={childRefs[index]} \n            className='swipe' \n            key={character.name} \n            onSwipe={(dir) => swiped(dir, character.name)} \n            onCardLeftScreen={() => outOfFrame(character.name)}>\n            {styleChange ? \n            <div style={{ backgroundImage: 'url(' + character.url + ')', \n            filter: 'sepia(20)'}} \n              className='card'>\n              <span>{character.name}</span></div> \n              : <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <span>{character.name}</span></div>}\n          </TinderCard>\n        )}\n      </div>}\n      <div className='buttons'>\n        <Popup\n          key={buttonDescription[1].name}\n          header={buttonDescription[1].name}\n          trigger={<button onClick={() => swipe('left')}><FcLike /></button>}\n          content={buttonDescription[1].description}\n          position='bottom left'\n        />\n        <Popup\n          key={buttonDescription[2].name}\n          header={buttonDescription[2].name}\n          trigger={<button onClick={() => swipe('right')}><AiFillDislike /></button>}\n          content={buttonDescription[2].description}\n          position='bottom center'\n        />\n        <Popup\n          key={buttonDescription[3].name}\n          header={buttonDescription[3].name}\n          trigger={<button onClick={() => imageStyleChange()}>Style</button>}\n          content={buttonDescription[3].description}\n          position='bottom center'\n        />\n        <Modal\n          basic\n          onClose={() => setOpen(false)}\n          onOpen={() => setOpen(true)}\n          open={open}\n          size='small'\n          trigger={<button className=\"refreshButton\"><GrRefresh /></button>}\n        >\n        <Header icon>\n          <Icon name='question' />\n            Are you sure?\n        </Header>\n        <Modal.Content>\n          <p>\n            By pressing 'Refresh' button, you will see NEW set of nature images.\n            But you need to wait for seconds.\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button basic color='red' inverted onClick={() => setOpen(false)}>\n            <Icon name='remove' /> No\n          </Button>\n          <Button color='green' inverted onClick={() => refresh()}>\n            <Icon name='checkmark' /> Yes\n          </Button>\n        </Modal.Actions>\n        </Modal>\n        \n      </div>\n      {lastDirection === 'left' ?\n      <h2 \n        key={lastDirection} \n        className='infoText'>You  <FcLike /></h2> \n        : (lastDirection === 'right' ? \n        <h2 key={lastDirection} className='infoText'>You  <AiFillDislike /></h2>\n          : <h2 className='infoText'>Swipe left =<FcLike />, right = <AiFillDislike /> , or press a button</h2>)}\n    </div>\n  )\n}\n\nexport default App;","export default __webpack_public_path__ + \"static/media/sea.71a5bcf8.jpeg\";","export default __webpack_public_path__ + \"static/media/trees.29296f33.jpeg\";","export default __webpack_public_path__ + \"static/media/flower.eb2dccca.jpeg\";","export default __webpack_public_path__ + \"static/media/flowers.21142c77.jpeg\";","export default __webpack_public_path__ + \"static/media/palm-trees.dcb8c334.jpeg\";","export default __webpack_public_path__ + \"static/media/purple-flowers.9f4edd42.jpeg\";","export default __webpack_public_path__ + \"static/media/red-sky.53430e51.jpeg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}