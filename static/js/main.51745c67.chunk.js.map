{"version":3,"sources":["components/HowToUseModal.js","components/RefreshButton.js","App.js","reportWebVitals.js","index.js"],"names":["HowToUseModal","useState","open","setOpen","Modal","closeIcon","trigger","className","Icon","name","onClose","onOpen","Header","icon","content","Content","List","Item","RefreshButton","basic","size","Actions","Button","color","inverted","onClick","window","location","reload","localStorage","getItem","db","JSON","parse","url","liked","alreadyRemoved","charactersState","App","characters","setCharacters","lastDirection","setLastDirection","styleChange","setStyleChange","natureImageScraper","a","fetch","response","ok","Error","statusText","text","result","forEach","item","push","setItem","stringify","childRefs","useMemo","Array","length","fill","map","i","React","createRef","buttonDescription","description","swipe","dir","cardsLeft","filter","person","includes","toBeRemoved","index","indexOf","undefined","alert","current","rel","href","crossorigin","character","ref","onSwipe","direction","nameToDelete","swiped","onCardLeftScreen","startsWith","style","backgroundImage","Popup","header","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51745c67.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Header, Icon, Modal, List } from 'semantic-ui-react'\nimport { FcLike } from 'react-icons/fc'\nimport { AiFillDislike } from 'react-icons/ai'\nimport { GrRefresh } from 'react-icons/gr'\n//import { BiArrowBack } from 'react-icons/bi'\n\nfunction HowToUseModal() {\n\n    const [open, setOpen] = useState(false)\n\n    return (\n        <Modal\n        closeIcon\n        open={open}\n        trigger={<button className='how-to-use'><Icon name='book' /> How To Use</button>}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        >\n        <Header icon='book' content='How To Use' />\n      <Modal.Content>\n      \n      <List>\n        <List.Item>\n          <List.Header>Swipe Left</List.Header>If you LIKE the image, swipe it to the left.\n        </List.Item>\n        <List.Item>\n          <List.Header>Swipe Right</List.Header>If you DISLIKE the image, swipe it to the right.\n        </List.Item>\n        {/* <List.Item>\n          <List.Header><BiArrowBack /> BACK button</List.Header>Former image\n        </List.Item> */}\n        <List.Item>\n          <List.Header><FcLike /> LIKE button</List.Header>If you LIKE the image, press this button!\n        </List.Item>\n        <List.Item>\n          <List.Header><AiFillDislike /> DISLIKE button</List.Header>If you DISLIKE the image, press this button!\n        </List.Item>\n        <List.Item>\n          <List.Header>STYLE Button</List.Header>If you want to change the style of image, press this button!\n        </List.Item>\n        <List.Item>\n          <List.Header><GrRefresh /> REFRESH button</List.Header>New set of nature images\n        </List.Item>\n      </List>\n        \n      </Modal.Content>\n      <Header icon='book' content='How To Use (in detail)' />\n      <Modal.Content>\n        <List>\n          <List.Item>\n            <List.Header>Swipe images</List.Header>If you like an image, swipe the image to the LEFT.\n            If you do NOT like an image, swipe the image to the RIGHT\n          </List.Item>\n          <List.Item>\n            <List.Header><FcLike /> LIKE button</List.Header>\n            If you like an image, press this 'Like' button. Then the image will be swiped to the left.\n          </List.Item>\n          <List.Item>\n            <List.Header><AiFillDislike /> DISLIKE button</List.Header>\n            If you do NOT like an image, press this 'Dislike' button. Then the image will be swiped to the right.\n          </List.Item>\n          <List.Item>\n            <List.Header>STYLE Button</List.Header>\n            If you want to change the style of image, press this 'Style' button.\n          </List.Item>\n          <List.Item>\n            <List.Header><GrRefresh /> REFRESH button</List.Header>\n            New set of nature images will be shown! If you are not seeing new set of nature images, please wait and try again...!\n            Sorry for the inconvenience.\n          </List.Item>\n        </List>\n      </Modal.Content>\n      </Modal>\n\n    )\n}\n\nexport default HowToUseModal","import React, { useState } from 'react'\nimport { Header, Icon, Modal, Button } from 'semantic-ui-react'\nimport { GrRefresh } from 'react-icons/gr'\n\nfunction RefreshButton() {\n\n    const [open, setOpen] = useState(false)\n\n    const refresh = () => {\n        setOpen(false)\n        window.location.reload()\n    }\n\n    return (\n        <Modal\n          basic\n          onClose={() => setOpen(false)}\n          onOpen={() => setOpen(true)}\n          open={open}\n          size='small'\n          trigger={<button className=\"refreshButton\"><GrRefresh /></button>}\n        >\n        <Header icon>\n          <Icon name='question' />\n            Are you sure?\n        </Header>\n        <Modal.Content>\n          <p>\n            By pressing 'Refresh' button, you will see NEW set of nature images.\n            If you are seeing the same images, please wait and try again...! Sorry for the inconvenience.\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button basic color='red' inverted onClick={() => setOpen(false)}>\n            <Icon name='remove' /> No\n          </Button>\n          <Button color='green' inverted onClick={() => refresh()}>\n            <Icon name='checkmark' /> Yes\n          </Button>\n        </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default RefreshButton","// Author: Hae-Ji Park (github.com/positive235)\n// Date: Jul 2021\n// Summary: Nature image web scraping\n\n//Credits:\n// Copyright file:\"https://github.com/3DJakob/react-tinder-card-demo/blob/master/src/examples/Advanced.js\" \n// Copyright (c) 2020 All Rights Reserved\n// Author: Jakob Unnebäck\n// Summary: react-tinder-card Advanced Example\n\nimport './App.css'\nimport React, { useState, useMemo } from 'react'\nimport TinderCard from 'react-tinder-card'\nimport { Popup } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport HowToUseModal from './components/HowToUseModal'\nimport RefreshButton from './components/RefreshButton'\nimport { FcLike } from 'react-icons/fc'\nimport { AiFillDislike } from 'react-icons/ai'\n\nif (localStorage.getItem(\"photos\")) {\n  var db = JSON.parse(localStorage.getItem(\"photos\"))\n} else {\n  // default nature images (not from nature image web scraping)\n  db = [\n    {\n      name: 'Sea',\n      url: './img/sea.jpeg',\n      liked: false\n    },\n    {\n      name: 'Trees',\n      url: './img/trees.jpeg',\n      liked: false\n    },\n    {\n      name: 'Flower',\n      url: './img/flower.jpeg',\n      liked: false\n    },\n    {\n      name: 'Flowers',\n      url: './img/flowers.jpeg',\n      liked: false\n    },\n    {\n      name: 'Palm Trees',\n      url: './img/palm-trees.jpeg',\n      liked: false\n    },\n    {\n      name: 'Purple Flowers',\n      url: './img/purple-flowers.jpeg',\n      liked: false\n    },\n    {\n      name: 'Sunset',\n      url: './img/red-sky.jpeg',\n      liked: false\n    },\n    {\n      name: 'Waterfall',\n      url: './img/waterfall.jpeg',\n      liked: false\n    }\n  ]\n}\n\n\nvar alreadyRemoved = []\nlet charactersState = db\n\nfunction App () {\n  const [characters, setCharacters] = useState(db)\n  const [lastDirection, setLastDirection] = useState()\n  const [styleChange, setStyleChange] = useState(false)\n\n  async function natureImageScraper() {\n    const response = await fetch(\"https://nature-image-web-scraper.wl.r.appspot.com/a-set-of-nature-images\", {}) // type: Promise<Response>\n    if (!response.ok) {\n      throw Error(response.statusText)\n    }\n    return response.text()\n  }\n  \n  (async() => {\n    var result = await natureImageScraper()\n    db = [];\n    result = JSON.parse(result)\n    result.forEach(function(item) {\n      db.push({\n        name: item,\n        url: item,\n        liked: false\n      })\n    })\n    localStorage.setItem(\"photos\", JSON.stringify(db))\n  })()\n  \n  db = JSON.parse(localStorage.getItem(\"photos\"))\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\n\n  const buttonDescription = [\n    {\n      name: 'Back',\n      description: 'If you want to see the former nature image, press this button!',\n    },\n    {\n      name: 'Like',\n      description: 'If you like this image, press this button! Then the image will be swiped to the left',\n    },\n    {\n      name: 'Dislike',\n      description: 'If you do NOT like this image, press this button! Then the image will be swiped to the right',\n    },\n    {\n      name: 'Change Style',\n      description: 'If you want to change the style of image, press this button!',\n    },\n    {\n      name: 'Refresh',\n      description: 'New set of nature images will be shown! But...sometimes it shows the same images, please wait and try again...!', \n    }\n  ]\n\n  const swiped = (direction, nameToDelete) => {\n    const index = db.map(person => person.name).indexOf(nameToDelete)\n    setLastDirection(direction)\n    if (direction === 'left') db[index].liked = true\n    if (direction === 'right') db[index].liked = false\n  }\n\n  const outOfFrame = (name) => {\n    charactersState = charactersState.filter(character => character.name !== name)\n    setCharacters(charactersState)\n  }\n\n  const swipe = (dir) => {\n    setStyleChange(false)\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\n    if (cardsLeft.length) {\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n      const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      if (childRefs[index] === undefined) {\n        alert(\"Sorry! Your new set of images has been loaded now.\")\n        window.location.reload()\n      }\n      childRefs[index].current.swipe(dir) // Swipe the card\n      // if (dir === 'left') db[index].liked = true\n      // if (dir === 'right') db[index].liked = false\n    }\n  }\n\n  // const refresh = () => {\n  //   async function natureImageScraper() {\n  //     const response = await fetch(\"https://nature-image-web-scraper.wl.r.appspot.com/a-set-of-nature-images\", {}) // type: Promise<Response>\n  //     if (!response.ok) {\n  //       throw Error(response.statusText)\n  //     }\n  //     return response.text()\n  //   }\n    \n  //   (async() => {\n  //     var result = await natureImageScraper()\n  //     db = [];\n  //     result = JSON.parse(result)\n  //     result.forEach(function(item) {\n  //       db.push({\n  //         name: item,\n  //         url: item,\n  //         liked: false\n  //       })\n  //     })\n  //     localStorage.setItem(\"photos\", JSON.stringify(db))\n  //   })()\n  // }\n\n  const imageStyleChange = () => {\n    setStyleChange(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <HowToUseModal />\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n      <link href=\"https://fonts.googleapis.com/css2?family=Amatic+SC:wght@400;700&display=swap\" rel=\"stylesheet\" />\n      <h1>We <FcLike/> Nature</h1>\n\n      <div className='cardContainer'>\n        {characters.map((character, index) =>\n          <TinderCard ref={childRefs[index]} className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            { character.url.startsWith('https://') && styleChange ? \n            <div style={{ backgroundImage: 'url(' + character.url + '?brightness=-5&contrast=42&exposure=98&shadows=28&highlights=73&hue=36&saturation=-8&lightness=51)'}} className='card'>\n              <span>{character.name}</span></div> \n              : <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <span>{character.name}</span>\n            </div>} \n          </TinderCard>\n        )}\n      </div>\n      <div className='buttons'>\n        <Popup\n          key={buttonDescription[1].name}\n          header={buttonDescription[1].name}\n          trigger={<button onClick={() => swipe('left')}><FcLike /></button>}\n          content={buttonDescription[1].description}\n          position='bottom left'\n        />\n        <Popup\n          key={buttonDescription[2].name}\n          header={buttonDescription[2].name}\n          trigger={<button onClick={() => swipe('right')}><AiFillDislike /></button>}\n          content={buttonDescription[2].description}\n          position='bottom center'\n        />\n        <Popup\n          key={buttonDescription[3].name}\n          header={buttonDescription[3].name}\n          trigger={<button onClick={() => imageStyleChange()}>Style</button>}\n          content={buttonDescription[3].description}\n          position='bottom center'\n        />\n        <RefreshButton />\n        \n      </div>\n      {lastDirection === 'left' ?<h2 key={lastDirection} className='infoText'>You  <FcLike /></h2> : (lastDirection === 'right' ? <h2 key={lastDirection} className='infoText'>You  <AiFillDislike /></h2>:<h2 className='infoText'>Swipe left =<FcLike />, right = <AiFillDislike /> , or press a button</h2>)}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}